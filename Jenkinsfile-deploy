pipeline {
    agent { label 'debian-agent' }

    environment {
        WEB_HOST = '192.168.56.106'
        DB_HOST  = '192.168.56.105'
        DB_USER  = 'wp_user'
        DB_PASS  = 'wp_pass'
        DB_NAME  = 'wordpress_db'
        SSH_USER = 'manuelcollado'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Clonando repositorio...'
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Ejecutando análisis SonarQube...'
                withSonarQubeEnv('SonarQube-Local') { // Asegúrate de tener configurada esta instalación en Jenkins
                    script {
                        def scannerHome = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=wordpress-project \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${SONAR_HOST_URL} \
                                -Dsonar.login=${SONAR_AUTH_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Configurar Base de Datos') {
            steps {
                echo "Configurando base de datos en ${DB_HOST}..."
                sh """
                    ssh -o StrictHostKeyChecking=no ${SSH_USER}@${DB_HOST} '
                        cat <<'"'"'EOF'"'"' > /tmp/setup_wp_db.sh
#!/bin/bash
mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};"
mysql -e "CREATE USER IF NOT EXISTS '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASS}';"
mysql -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'%';"
mysql -e "FLUSH PRIVILEGES;"
EOF
                        chmod +x /tmp/setup_wp_db.sh
                        sudo -n /tmp/setup_wp_db.sh
                        rm /tmp/setup_wp_db.sh
                    '
                """
            }
        }

        stage('Desplegar WordPress') {
            steps {
                echo "Instalando y configurando WordPress en ${WEB_HOST}..."
                sh """
                    ssh -o StrictHostKeyChecking=no ${SSH_USER}@${WEB_HOST} '
                        cat <<'"'"'EOF'"'"' > /tmp/deploy_wp.sh
#!/bin/bash
apt update
apt install -y apache2 php php-mysql wget unzip
cd /var/www/html
rm -rf wordpress
wget https://wordpress.org/latest.zip
unzip latest.zip
rm latest.zip
chown -R www-data:www-data wordpress
cd wordpress
cp wp-config-sample.php wp-config.php
sed -i "s/database_name_here/${DB_NAME}/" wp-config.php
sed -i "s/username_here/${DB_USER}/" wp-config.php
sed -i "s/password_here/${DB_PASS}/" wp-config.php
sed -i "s/localhost/${DB_HOST}/" wp-config.php
systemctl restart apache2
EOF
                        chmod +x /tmp/deploy_wp.sh
                        sudo -n /tmp/deploy_wp.sh
                        rm /tmp/deploy_wp.sh
                    '
                """
            }
        }

        stage('Verificar Despliegue') {
            steps {
                echo "Verificando que WordPress responde correctamente..."
                sh """
                    ssh -o StrictHostKeyChecking=no ${SSH_USER}@${WEB_HOST} '
                        curl -IL http://localhost/wordpress | grep "200 OK" && echo "WordPress responde correctamente."
                    '
                """
            }
        }

        stage('Quality Gate') {
            steps {
                echo 'Esperando resultado del Quality Gate de SonarQube...'
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completado correctamente: análisis SonarQube y despliegue de WordPress exitosos."
        }
        failure {
            echo "Falló el pipeline. Revisa los logs en Jenkins."
        }
    }
}


